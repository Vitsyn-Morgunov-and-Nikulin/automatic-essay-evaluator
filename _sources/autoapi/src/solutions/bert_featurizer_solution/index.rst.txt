:py:mod:`src.solutions.bert_featurizer_solution`
================================================

.. py:module:: src.solutions.bert_featurizer_solution


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.solutions.bert_featurizer_solution.BertWithHandcraftedFeaturePredictor



Functions
~~~~~~~~~

.. autoapisummary::

   src.solutions.bert_featurizer_solution.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   src.solutions.bert_featurizer_solution.spellcheck


.. py:data:: spellcheck
   

   

.. py:class:: BertWithHandcraftedFeaturePredictor(model_name: str, catboost_iter: int, saving_dir: str)

   Bases: :py:obj:`src.solutions.base_solution.BaseSolution`

   Base class for any competition solution.

   .. py:attribute:: device
      

      

   .. py:method:: transform_data(X: pandas.Series) -> pandas.DataFrame


   .. py:method:: fit(X: pandas.DataFrame, y: pandas.DataFrame, **kwargs) -> None


   .. py:method:: predict(X: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: save(directory: Union[str, pathlib.Path]) -> None

      Stores model to the directory.

      The directory must be empty.


   .. py:method:: load(directory: Union[str, pathlib.Path]) -> None

      Loads model from the directory.

      Initializes the solution correctly even if the config dict
      wasn't specified in the constructor.

      The directory should not contain files other than those produced by
      the `save` method of the same class.



.. py:function:: main()


